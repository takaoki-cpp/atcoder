Fact 1 - If we have two sushi's of the same type, it is always better to choose the one of higher value. 

-------------

Fact 2 - If we want to increase the number of distinct sushis, it is always better to exchange some sushi who's type occurs more than one time. 

Reason - If we swap a sushi who's type only occurs one time, then we do not increase the number of distinct sushis.

----------

Let us sort the sushi's by their value - d1 > d2 > ... > dN.

Now, we will first choose the greatest K values.

We will also keep a priority queue Q, which consists of values of all sushi's who's types occurs more than once EXCEPT the greatest. 

FOr example, suppose sushi of type 3 has 3 values = {5, 6, 7}
Suppose there is another sushi of type 1 which has 2 values = {8, 9}

Then our priority queue Q will be {5, 6, 8}

Then, we will try to be greedy and see if there is a better answer in choosing smaller values but increasing the number of distinct types. 

---------

Fact - As we have sorted the array by value, we will not add the first value of a new type that we encounter as it will be the largest. 

-----

At first, we will just choose the largest K values. 

----

Then, we will scan the rest of the array. 

Fact - If (A[i].type) has already occured, then there is not point in examining if we should take it.

Reason - The array is sorted by value, so this means we have chosen a higher value of (A[i].type) already and we will not be increasing number of distinct types. 

If this leads to a better sum, we will update the sum.

----

When we encounter a new sushi, we will remove the smallest element of the priority queue and insert the new element in and it will increase the number of distinct types we have. 


The change is (A[i].value - smallest) + {(d + 1)^2 - d^2}

--------

Fact - We will only go on till we have K distinct types and stop. 

Reason - There can only be K distinct types. After that if we continue, we will be keeping the number of distinct types same, but reducing the value.

----

Refer my code for more clarity.

------

int main()
{
    int no_of_elements, no_of_choices;
    cin >> no_of_elements >> no_of_choices;

    vector <info> A(no_of_elements);
    for(int i = 0; i < no_of_elements; i++)
        cin >> A[i].type >> A[i].value;

    sort(all(A));
    reverse(all(A));

    vector <int> used(no_of_elements + 1, false);
    priority_queue <long long,vector<long long>, greater<long long> >Q;

    long long sum = 0, distinct_types = 0;
    for(int i = 0; i < no_of_choices; i++)
    {
        sum += A[i].value;

        if(!used[A[i].type])
        {
            used[A[i].type] = true;
            distinct_types++;
        }
        else
        {
            Q.push(A[i].value);
        }
    }
    sum += distinct_types*distinct_types;

    long long new_sum = sum;

    for(int i = no_of_choices; i < no_of_elements; i++)
    {
        if(used[A[i].type] || Q.size() == 0) continue;

        long long smallest = Q.top();

        new_sum += (A[i].value - smallest) + (distinct_types + 1)*(distinct_types + 1) - (distinct_types*distinct_types);

        Q.pop();

        distinct_types++;

        used[A[i].type] = true;


        sum = max(sum, new_sum);
    }

    cout << sum;
    return 0;
}
