If there are 0 stones, then the second player wins. 

If there are x stones in the pile now, the first player can take out A_1, A_2, ... A_n stones. 

That will make him the second player of (x - A_1), (x - A_2), ... , (x - A_n) stones. If it is known that any of these positions is winning for player 2, then x stones is winning for player 1. 

If all these positions are winning for player 1, then x stones is winning for player 2 since the player will lose no matter what move he makes.

--------

int main()
{
    int no_of_moves, no_of_stones;
    cin >> no_of_moves >> no_of_stones;

    vector <int> move(no_of_moves + 1);
    for(int i = 1; i <= no_of_moves; i++)
        cin >> move[i];

    vector <int> winner(no_of_stones + 1, 2);
    for(int i = 1; i <= no_of_stones; i++)
    {
        for(int j = 1; j <= no_of_moves; j++)
        {
            if(move[j] > i) continue;

            if(winner[i - move[j]] == 2)
                winner[i] = 1;
        }
    }

    cout << (winner[no_of_stones] == 1 ? "First\n" : "Second\n");
    return 0;
}