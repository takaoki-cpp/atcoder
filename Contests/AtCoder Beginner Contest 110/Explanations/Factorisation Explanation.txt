We want to count the number of different strigns of n integers such that 

a1 x a2 x a3 ... x an = M

----

Let us consider the prime factors of M. 

Let M = p1^e1 p2^e2

Then how many ways can the e1 number of p1s be given to the N integers ? 

Stars and bars. 

This is given by C(e1 + n - 1, N). 

Each prime factors is independent. 

So answer = C(e1 + N - 1, N - 1) x C(e2 + N - 1 ,N - 1)

--------------

int main()
{
    const int MOD = 1e9 + 7;

    factorial[0] = 1;
    for(int i = 1; i <= MAX_N; i++)
        factorial[i] = (i*factorial[i - 1])%MOD;

    inverse_factorial[MAX_N] = power_mod(factorial[MAX_N], MOD - 2, MOD);
    for(int i = MAX_N - 1; i >= 0; i--)
        inverse_factorial[i] = ( (i + 1)*inverse_factorial[i + 1] )%MOD;

    int no_of_factors, n;
    scanf("%d %d", &no_of_factors, &n);

    LL answer = 1;
    for(int i = 2; i*i <= n; i++)
    {
        int exponent = 0;

        while(n%i == 0)
        {
            n = n/i;
            exponent++;
        }

        LL no_of_ways_of_placing_this_prime = choose(exponent + no_of_factors - 1, exponent, MOD);
        answer = (answer*no_of_ways_of_placing_this_prime)%MOD;
    }

    if(n > 1)
    {
        int exponent = 1;

        LL no_of_ways_of_placing_this_prime = choose(exponent + no_of_factors - 1, exponent, MOD);
        answer = (answer*no_of_ways_of_placing_this_prime)%MOD;
    }

    printf("%lld\n", answer);
    return 0;
}
