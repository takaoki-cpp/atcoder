Let us make a bitmask corresponding to each of the keys. 

If a key can open box i, then we will set the i-th bit in the binary representation of mask[i]. 

There are only 12 boxes, which is what allows us this idea. 

------

Let us use a DP f(i, m). 

Where f(i, m) is the minimum cost it takes to open boxes represented by m using only the first i keys. 

For example, if m = 00110110, then it means that we must be able to open the second, third, fourth and fifth boxes exactly. 

----

Let us try to build a recurrence for this ? 

We have two options for the i-th key. 

----

Case 1 - We do not use it. 

Then, f(i, m) = f(i - 1, m)

This is very straightforward. It's simply the same as doing it until the first (i - 1) keys. 

---

Case 2 - We use the i-th box

Now, here is the first approach that came to my mind. 

If we take the key i, then we will check the minimum cost possible with the first (i - 1) keys without any of the boxes that the i-th 
key can open. 

Suppose the current key can open second and third box - 000110, then we want to get the cost of mask without these two bits set. 

This is (m^mask[i]). 

f(i, m) = min{ f(i - 1, m), f(i - 1, m^mask[i]) + cost[i]) }

------

While this appears to be correct, it's not complete. 

The state f(i - 1, m^mask[i]) might not have the optimal value. 

For example, if mask[i] = 000110

If we remove those bits from a given mask. Say M = 001111, 

Then, we are checking f(i - 1, 001001). This might have a high cost. 

But, f(i - 1, 001011) might have a lower cost. 

Although the result mask is the same = 001111, we might do better going from 001011 than from 001001. 

This is why we need to iterate over all submasks of mask[i]. 

For each submask, S we will do 

f(i, m) = min{f(i, m), f(i, m^S) + cost[i]}

------

int main()
{
    int no_of_boxes, no_of_keys;
    cin >> no_of_boxes >> no_of_keys;

    vector <long long> cost(no_of_keys + 1, 0);
    vector <int> no_of_openable_boxes(no_of_keys + 1, 0);
    vector <long long> mask(no_of_keys + 1, 0);

    for(int i = 1; i <= no_of_keys; i++)
    {
        cin >> cost[i] >> no_of_openable_boxes[i];

        for(int j = 1; j <= no_of_openable_boxes[i]; j++)
        {
            int key;
            cin >> key;

            key--;
            mask[i] |= (1 << key);
        }
    }

    long long oo = 1e12;
    int complete_mask = (1LL << no_of_boxes) - 1;
    vector <long long> minimum_cost(complete_mask + 1, oo);
    minimum_cost[0] = 0;

    for(int i = 1; i <= no_of_keys; i++)
    {
        for(int m = 0; m <= complete_mask; m++)
        {
            if(is_submask(m,mask[i]))
            {
                for(int sub_m = 0; sub_m <= complete_mask; sub_m++)
                {
                    if(is_submask(mask[i],sub_m))
                    {
                        minimum_cost[m] = min(minimum_cost[m], minimum_cost[m^sub_m] + cost[i]);
                    }
                }

            }
        }
    }

    cout << (minimum_cost[complete_mask] == oo ? -1 : minimum_cost[complete_mask]) << "\n";
    return 0;
}
