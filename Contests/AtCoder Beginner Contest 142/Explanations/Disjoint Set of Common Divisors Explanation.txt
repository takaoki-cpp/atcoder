Any integer that divides both A and B must also divide gcd(A, B). 

Let G = gcd(A, B). 

Suppose G = p1^(k1) p2^(k2) ... pn^(kn) in it's prime factorisation. 

Every factor of G will have all these prime factors raised to some power. (Possibly 0). 

------

We want to maximise the number of coprime divisors. Then, it is always best to choose a set of factors, such that each factor has only 1 prime factor. 

Suppose we have a divisor with 2 prime factors, then we can increase the number of divisors by simply splitting them into 2 factors and increase the number of coprime divisors we have. 

------

If G has N prime factors, then the answer is (N + 1). 

We will make N divisors consisting of N prime factors each and then add 1 to this set. 

Hence, the answer is (N + 1)

------

int main()
{
    long long A, B;
    cin >> A >> B;

    long long gcd = __gcd(A, B);

    int no_of_prime_diviors = 0;
    for(long long i = 2; i*i <= gcd; i++)
    {
        if(gcd%i == 0)
        {
            no_of_prime_diviors++;

            while(gcd%i == 0)
            {
                gcd /= i;
            }
        }
    }

    if(gcd > 1)
        no_of_prime_diviors++;

    int coprime_divisors = 1 + no_of_prime_diviors;

    cout << coprime_divisors << "\n";

    return 0;
}