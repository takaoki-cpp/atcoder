I shall provide some intuition. 

Rather than think of it as a graph, it is much better to think of a straight line with N integer points. 

We are given M segments and must delete the least number of lines so that all the end points of the M segments are disconnected. 

Now, let us consider the end point with the smallest endpoint. Let it be S1 - [a1 b1]

Now, at least one line in between a1 and b1 has to be deleted so that S1 is disconnected. 

However, which line to delete ? 

We'd like to delete a line that lies in as many other segments as possible so that one deletion can disconnect as many segments as possible. 

Let us delete the last line of the segment a1 b1. 

We can see that this is optimal. Let us suppose that there is some other line which on deletion disconnects k segments. Since the segments are sorted by their end points - b, it ensures all the segments that are disconnected after deleting this line have their b >= b1. 
And if the start point a < line, then a < last_line. 

So, we can always do at least as well by deleting the last line of a segment. 


Thus, the greedy solution can be seen to be optimal.

So, we sort the segments based on the end points and delete the last edge of a segment only if the segment has no lines already deleted. 
For this, we keep track of the last line to be deleted. 

-----------------------------------------------------------

struct info
{
    int start, end;

    int operator<(info &A)
    {
        return(A.end == end ? start < A.start : end < A.end);
    }
};

int main()
{
    int no_of_vertices, no_of_segments;
    scanf("%d %d", &no_of_vertices, &no_of_segments);

    vector <info> segments(no_of_segments + 1);
    for(int i = 1; i <= no_of_segments; i++)
        scanf("%d %d", &segments[i].start, &segments[i].end);

    sort(all(segments));

    int no_of_deleted_bridges = 0, last_deleted = 0;
    for(int i = 1; i <= no_of_segments; i++)
    {
        if(segments[i].start > last_deleted)
        {
            last_deleted = segments[i].end - 1;
            no_of_deleted_bridges++;
        }
    }

    printf("%d\n", no_of_deleted_bridges);
    return 0;
}
